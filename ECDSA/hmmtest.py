import numpy as np
from hmmlearn import hmm
import Levenshtein as ls


states = (0, 1) 
n_states = len(states)
observations = ("0", "1")
n_observations = len(observations) 
start_probability = np.array([1.0, 0])

raw_samples = [
    "1000000100010000100001000000100000100001000001000100000100001000000100100001000100001000010000100001000010000100001000010000100001000010000010000100000001000010000000100000010000100010000100000100001000001000000100000100001000000000000000001000100000100000100001001000010000100",
    "1010000100000000100001000000000100000100000100000010000001000001000010000001000100010000100010000100001000010010001000010001000010001000010000100001000001000001000001000000100010000100010001000000000010000010000010010000000000000001000100000100000001000000000100000100000100",
    "10000000001000010001000010000000000000100001000001000000100010000100010000100010001000010000100001000000000000010000100010000000000000010010000100001000001000000010000001000100010001000010000000000100000000100010000010000100000010000010001000100000100010",
    "10000010000100001000010000000001000001000010000001000000100100001000010000100010001000001000010000100000000100010001000010000100001000000000100001000000010001000001000001000100001000010000010001000001000000100001000010000001000000000000010000001000001001000010000100100",
    "1000000010000010000010100000001000001001000001000001000001001000000100001001001001000100001010001001000100100100000000000100000000010000010000100000010010000100001000100010100100001010000100000000100100010001001000010000100",
    "100000000100010000100000100000001000010000100001000000100001000001000000100100010000010000010000100100010001000010010001000100001000100001000001000010000100000010000000000100010001000010001000000000000100001000001000000001000100000010000100001000100000100000010",
    "1000000000100001000010010000000000000010000100000010000010000010000100000001000010000000000000010001000010000100010000100000001000100001000010000100001000000010000100001000000100001000010000100000100100000100000010000010000100000100000000100010000001000001000010001001000000100",
]
nonce = "1000000010001000100010000000010000100001000001000001000010000100000010001000100010001000100001000000100010001000100001000000010001000001000100000100000010010000100001000100001000100000000001000100001000000000010001000100010000000001000000100000001"
samples = []
min_len = min(list(map(lambda x : len(x), raw_samples)))

for s in raw_samples:
    samples.append(list(map(int, s[:min_len])))

# print(samples)

# states matrix A
transition_probability = np.array([
    [0.79, 0.21],
    [1.0, 0]
    
])

# observations matrix B
emission_probability = np.array([
    [0.83, 0.17],
    [0.92, 0.08],
])

model2 = hmm.MultinomialHMM(n_components=n_states, n_iter=50, tol=0.01)
X2 = np.array(samples)
# X2 = np.array([[0, 1, 0, 1], [0, 0, 0, 1], [1, 0, 1, 1]])
# print(X2)

print("*" * 100)
model2.fit(X2)
print(model2.startprob_, model2.transmat_, model2.emissionprob_)
print (model2.score(X2))

# print("*" * 100)
# model2.fit(X2)
# print(model2.startprob_, model2.transmat_, model2.emissionprob_)
# print (model2.score(X2))

# print("*" * 100)
# model2.fit(X2)
# print(model2.startprob_, model2.transmat_, model2.emissionprob_)
# print (model2.score(X2))

# model = hmm.MultinomialHMM(n_components=n_states)
# model.startprob_ = start_probability
# model.transmat_ = transition_probability
# model.emissionprob_ = emission_probability
seen_list = [1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]
seen = np.array([seen_list]).T

logprob, box = model2.decode(seen, algorithm="viterbi")
box_str = "".join(map(lambda x : str(states[x]), box))
print("*"*100)
print("The ball picked: ", ",".join(map(lambda x : observations[x], seen_list)))
print("The hidden box: ", logprob, box_str)
print("The real nonce: ", nonce, ls.distance(nonce, box_str))





